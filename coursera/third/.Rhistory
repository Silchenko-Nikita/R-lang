submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
e
2
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
x
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Russkiy", "Voeniy")
submit()
mad_libs(place = 32, adjective = 11, noun = 52)
submit()
mad_libs(place = 32, adjective = 11, noun = 52)
submit()
submit()
'Hello' %p% 'student!'
submit()
submit()
'Hello' %p% 'student!'
info()
skip
skip()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
class(t4) > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
setwd("R lang/coursera/first/")
?file.path
?format
class("ds")
?class("ds")
install.packages("stringr")
install.packages("stringr")
str_pad("4.csv", width = 7, pad = "0")
library(stringr)
str_pad("4.csv", width = 7, pad = "0")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "sulfate", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "sulfate", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1)
?rbind
data.frame()
rbind(data.frame(), pollutantmean("specdata", "sulfate", 1))
dim(pollutantmean("specdata", "sulfate", 1))
source("pollutantmean.R")
dim(pollutantmean("specdata", "sulfate", 1))
source("pollutantmean.R")
dim(pollutantmean("specdata", "sulfate", 1))
dim(pollutantmean("specdata", "sulfate", 1:10))
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
class(pollutantmean("specdata", "sulfate", 1:10))
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
df  <- data.frame(a = 1, B = b0, f = gl(4,3))
df  <- data.frame(a = 1, B = 2, f = gl(4,3))
length(df)
df
?dim
nrows(df)
rows(df)
rnum(df)
attributes(df)
class(df)
dim(df)
dim(df)[0]
dim(df)[1]
df <- data.frame()
df["id"] <- 4
?df
?data.frame
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
res <- data.frame(row.names = c("id","nobs"))
res
print(res)
res <- data.frame()
res
names(res) <- c("id","nobs")
source("complete.R")
complete("specdata", 1)
complete("specdata", 1)
source("complete.R")
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?corr
?cor
source("corr.R")
corr("specdata", 0)
source("corr.R")
corr("specdata", 0)
alldata <- data.frame()
id = 1:332
for (i in id)
{
filename <- str_pad(paste(i, ".csv", sep = ""), width = 7, pad = "0")
filepath <- file.path(directory, filename)
dframe <- read.csv(filepath)
alldata <- rbind(alldata, dframe)
}
nitdata <- dframe[["nitrate"]]
suldata <- dframe[["sulfate"]]
compl <- dframe[!is.na(nitdata) & !is.na(suldata), ]
directory = "specdata"
threshold <- 0
directory <- "specdata"
alldata <- data.frame()
id = 1:332
for (i in id)
{
filename <- str_pad(paste(i, ".csv", sep = ""), width = 7, pad = "0")
filepath <- file.path(directory, filename)
dframe <- read.csv(filepath)
alldata <- rbind(alldata, dframe)
}
nitdata <- dframe[["nitrate"]]
suldata <- dframe[["sulfate"]]
compl <- dframe[!is.na(nitdata) & !is.na(suldata), ]
compl
cr <- cor(compl[["nitrate"]], compl[["sulfate"]])
cr
cr <- cor(dframe[["nitrate"]], dframe[["sulfate"]], use = pairwise.complete.obs)
cr <- cor(dframe[["nitrate"]], dframe[["sulfate"]], use = 'pairwise.complete.obs')
cr
cr <- cor(dframe[["nitrate"]], dframe[["sulfate"]], use = 'pairwise.na.obs')
cr <- cor(dframe[["nitrate"]], dframe[["sulfate"]], use = 'na.or.complete')
cr
cr <- cor(dframe[["nitrate"]], dframe[["sulfate"]], na.rm = TRUE)
cr <- cor(compl[["nitrate"]], compl[["sulfate"]])
cr <- cor(compl[compl["ID"] = 1][["nitrate"]], compl[["sulfate"]])
cr <- cor(compl[compl["ID"] == 1][["nitrate"]], compl[["sulfate"]])
cr <- cor(compl[compl["ID"] == 1][["nitrate"]], compl[compl["ID"] == 1][["sulfate"]])
compl["ID"] == 1
compl[compl["ID"] == 1]
compl[compl["ID"] == 640]
compl[compl["ID"] == 630]
compl
alldata <- data.frame()
id = 1:332
for (i in id)
{
filename <- str_pad(paste(i, ".csv", sep = ""), width = 7, pad = "0")
filepath <- file.path(directory, filename)
dframe <- read.csv(filepath)
alldata <- rbind(alldata, dframe)
}
nitdata <- dframe[["nitrate"]]
suldata <- dframe[["sulfate"]]
compl <- dframe[!is.na(nitdata) & !is.na(suldata), ]
compl
alldata
complete("specdata", 3)
complete("specdata")
vector()
v <- vector()
source("complete.R")
source("corr.R")
cr <- corr("specdata", 150)
complete("specdata")
cr <- corr("specdata", 150)
compl <- complete("specdata")
compl
compl[1]
compl[, 1]
compl[compl["id"] = 1]
compl[compl["id"] == 1]
compl[compl["id"] == 1]["nobs"]
compl["nobs"]
compl["nobs", 3]
compl["nobs",1]
compl[1, "nobs"]
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
summary(cr)
summary(cr)cr <- corr("specdata")
summary(cr)
cr <- corr("specdata")
summary(cr)
swirl()
swirl
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, csum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags, summary)
skip()
cd('../second')
setwd('../second')
setwd('..')
mkdir("second")
dir.create("second")
setwd("second/")
source("mat.R")
m1 <- matrix(1:4, ncol = 2, nrow = 2)
m1
m2 <- matrix(1:9, ncol = 3, nrow = 3)
m2
cacheSolve(m1)
cacheSolve(makeCacheMatrix(m1))
source("mat.R")
cacheSolve(makeCacheMatrix(m1))
matequal(mat1, mat2)
matequal(m1, m2)
source("mat.R")
cacheSolve(makeCacheMatrix(m1))
source("mat.R")
cacheSolve(makeCacheMatrix(m1))
solve(m1)
cacheSolve(makeCacheMatrix(m1))
cacheSolve(makeCacheMatrix(m1))
cacheSolve(makeCacheMatrix(m2))
solve(m2)
m2
m2 <- matrix(2:10, ncol = 3, nrow = 3)
solve(m2)
m2 <- matrix(9:1, ncol = 3, nrow = 3)
solve(m2)
m2 <- matrix(4:1, ncol = 2)
solve(m2)
solve(m1)
cacheSolve(makeCacheMatrix(m2))
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob =  c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, sd = 24)
rnorm(10, sd = 25)
rnorm(10, mean = 100, sd = 25)
>rpois
?rpois
>rpois(5, 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
?sample
exit()
help()
h
swirl
swirl()
ls()
class(plans)
class(plants)
dim(plants)
nrow(plants)
col(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars, x = cars$speed, y = cars&dist)
plot(x = cars$speed, y = cars&dist)
skip()
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars&dist)
plot(x = cars$speed, y = cars$dis)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtittle")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
boxplot()
boxplot(mtcars)
skip()
skip()
hist(mtcars$mpg)
setwd("../third/")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
?list
illnessMap <- list("heart attack" = "dsadsa")
illnessMap['he']
illnessMap['heart attack']
illnessMap[['heart attack']]
names(outcome)
illnessMap[['wd']]
df <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
df
head(df)
head("AL")
head(df['AL'])
head(df[, 'AL'])
head(df['AL', ])
head(df[['AL', ])
head(df[['AL', ]])
head(df[['AL']])
df['AL', ]
df[df['AL', ]]
df[df['AL', ], ]
df[, df['AL', ]]
df[df['State'] == 'AL']
head(df[df['State'] == 'AL'])
class(df[df['State'] == 'AL'])
?data.frame
df[df$State=="AL"]
df[df$State=="AL", ]
head(df[df$State=="AL", ])
df[df$State=="Ar", ]
df[df$State=="AF", ]
dfSubset <- df[df$State==state, ]
dfSubset <- df[df$State=="AL", ]
?tapply
tapply(dfSubset, "Hospital.Name", min)
tapply(dfSubset, dfSubset["Hospital.Name"], min)
tapply(dfSubset["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"], dfSubset["Hospital.Name"], min)
tapply(dfSubset["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"], dfSubset["Hospital.Name"], mean)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, mean)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, mein)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, min)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, mean)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, min)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, min)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, max)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, min)
tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, function(x) x)
min(tapply(dfSubset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, dfSubset$Hospital.Name, function(x) x))
dfSubset[c("Hospital.Name", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
?witch.max
?wich.max
?which.max
hospOutcomeDf <- dfSubset[c("Hospital.Name", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]
hospOutcomeDf[which.min('Hospital.Name'), ]
hospOutcomeDf[, !is.na(hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]]
hospOutcomeDf[, !is.na(hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])]
hospOutcomeDf[!is.na(hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"], )]
hospOutcomeDf[!is.na(hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]),]
!is.na(hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])
hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]
hospOutcomeDf[hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] != "Not Available",]
hospOutcomeDf <- hospOutcomeDf[hospOutcomeDf["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] != "Not Available",]
hospOutcomeDf[which.min('Hospital.Name'), ]
hospOutcomeDf[which.min('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"] != "Not Available'), ]
hospOutcomeDf[which.min('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]), ]
q''
dfSubset <- df[df$State==state, ]
c
